---
name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE: osvalois/sonarqube-container
  REGISTRY: ghcr.io

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        uses: orhun/git-cliff-action@v4
        with:
          config: .github/cliff.toml
          args: --latest --strip header

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            ## What's Changed

            ${{ steps.changelog.outputs.content }}

          ## Docker Images

          Pull the release:

              docker pull ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}
              docker pull ${{ env.DOCKER_IMAGE }}:sha-${{ github.sha }}

          ## Verification

          Verify the signature:

              cosign verify ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}

          View SBOM:

              cosign download sbom ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}
        draft: false
        prerelease: false

  build-release:
    name: Build Release Images
    runs-on: ubuntu-latest
    needs: release
    outputs:
      digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
        images: |
          ${{ env.DOCKER_IMAGE }}
          ${{ env.REGISTRY }}/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.release.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.release.outputs.version }}
          type=sha,prefix=sha-,format=short
          type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push by platform
        uses: docker/build-push-action@v6
        id: build
        with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: true
        sbom: true
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          BUILD_VERSION=${{ needs.release.outputs.version }}
          VCS_REF=${{ github.sha }}

  sign-and-attest:
    name: Sign and Attest Images
    runs-on: ubuntu-latest
    needs: [release, build-release]

    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Sign container images
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          # Sign all version tags
          cosign sign --yes ${{ env.DOCKER_IMAGE }}:${{ needs.release.outputs.version }}
          cosign sign --yes ${{ env.DOCKER_IMAGE }}:sha-${{ github.sha }}

      - name: Generate and attach SBOM
        run: |
          # Generate SBOM
          syft ${{ env.DOCKER_IMAGE }}:${{ needs.release.outputs.version }} \
            --output spdx-json > sbom.spdx.json

          # Attach SBOM to image
          cosign attach sbom \
            --sbom sbom.spdx.json \
            ${{ env.DOCKER_IMAGE }}:${{ needs.release.outputs.version }}

      - name: Create attestation
        uses: actions/attest-build-provenance@v2
        with:
        subject-name: ${{ env.DOCKER_IMAGE }}
        subject-digest: ${{ needs.build-release.outputs.digest }}
        push-to-registry: true

  publish-charts:
    name: Publish Helm Charts
    runs-on: ubuntu-latest
    needs: [release, sign-and-attest]
    if: false  # Enable when Helm charts are added

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Package Helm chart
        run: |
          helm package charts/sonarqube-devsecops \
            --version ${{ needs.release.outputs.version }} \
            --app-version ${{ needs.release.outputs.version }}

      - name: Push to chart repository
        run: |
          helm push sonarqube-devsecops-*.tgz oci://${{ env.REGISTRY }}/${{ github.repository }}/charts
