---
name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to scan'
        required: false
        default: 'latest'
        type: string

permissions:
  contents: read
  security-events: write
  issues: write

env:
  DOCKER_IMAGE: osvalois/sonarqube-container

jobs:
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@1.1.0
        with:
          project: 'sonarqube-container'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --format SARIF

      - name: Upload results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-report
          path: reports/
          
      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('reports/dependency-check-report.sarif') != ''
        with:
          sarif_file: 'reports/dependency-check-report.sarif'

  container-scan:
    name: Container Vulnerability Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tag: [latest, main, develop]

    steps:
      - name: Determine image tag
        id: image
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.image_tag }}" ]]; then
            TAG="${{ github.event.inputs.image_tag }}"
          else
            TAG="${{ matrix.tag }}"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v6
        id: grype
        with:
        image: ${{ env.DOCKER_IMAGE }}:${{ steps.image.outputs.tag }}
        fail-build: false
        severity-cutoff: critical

      - name: Upload Grype results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
        sarif_file: ${{ steps.grype.outputs.sarif }}

      - name: Run Trivy scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:${{ steps.image.outputs.tag }}
          format: 'sarif'
          output: 'trivy-container-${{ steps.image.outputs.tag }}.sarif'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-container-${{ steps.image.outputs.tag }}.sarif') != ''
        with:
          sarif_file: 'trivy-container-${{ steps.image.outputs.tag }}.sarif'
          
      - name: Run Docker Scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ env.DOCKER_IMAGE }}:${{ steps.image.outputs.tag }}
          only-fixed: true
          sarif-file: 'docker-scout-${{ steps.image.outputs.tag }}.sarif'
          
      - name: Upload Docker Scout results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('docker-scout-${{ steps.image.outputs.tag }}.sarif') != ''
        with:
          sarif_file: 'docker-scout-${{ steps.image.outputs.tag }}.sarif'

  create-issues:
    name: Create Security Issues
    runs-on: ubuntu-latest
    needs: [dependency-check, container-scan]
    if: failure()

    steps:
      - name: Create issue for vulnerabilities
        uses: actions/github-script@v7
        with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const date = new Date().toISOString().split('T')[0];
          const title = `Security Vulnerabilities Detected - ${date}`;
          const body = `## Security Scan Results

          Critical vulnerabilities were detected in the scheduled security scan.

          **Scan Date**: ${date}
          **Workflow Run**: [${context.runId}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})

          ### Actions Required:
          1. Review the security scan results
          2. Update vulnerable dependencies
          3. Rebuild and push updated images

          ### Affected Images:
          - ${{ env.DOCKER_IMAGE }}:latest
          - ${{ env.DOCKER_IMAGE }}:main
          - ${{ env.DOCKER_IMAGE }}:develop

          cc: @${{ github.repository_owner }}`;

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'vulnerability', 'automated']
          });

  update-dependencies:
    name: Auto-update Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update base image
        run: |
          # Check for base image updates and update Dockerfile if needed
          CURRENT_VERSION=$(grep "FROM sonarqube:" Dockerfile | cut -d: -f2)
          echo "Current version: $CURRENT_VERSION"

          # Pull latest and get its digest
          docker pull sonarqube:lts-community
          LATEST_DIGEST=$(docker inspect sonarqube:lts-community --format='{{index .RepoDigests 0}}')
          echo "Latest digest: $LATEST_DIGEST"

          # Update Dockerfile if image has changed
          if ! docker images --quiet sonarqube:$CURRENT_VERSION | grep -q .; then
            echo "Base image updated, updating Dockerfile"
            # This would trigger a new build with updated base image
            touch .base-image-updated
          fi

      - name: Create PR for updates
        uses: peter-evans/create-pull-request@v7
        with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies and base images'
        title: 'Security: Update dependencies and base images'
        body: |
          ## Automated Security Update

          This PR updates:
          - Base Docker image to latest version
          - Security patches

          ### Security Scan Results
          View the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ---
          *This PR was created automatically by the security scanning workflow.*
        branch: security-updates-${{ github.run_number }}
        labels: |
          security
          dependencies
          automated
