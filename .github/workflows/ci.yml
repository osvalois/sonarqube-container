---
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scan on Mondays at 2 AM UTC

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  pull-requests: write

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE: osvalois/sonarqube-container
  REGISTRY: ghcr.io

jobs:
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run hadolint for Dockerfile linting
        uses: hadolint/hadolint-action@v3.1.0

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          severity: warning

      - name: Run Gitleaks (Secret Scanning)
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

      - name: YAML Lint
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: .
          config_data: |
            extends: default
            rules:
              line-length:
                max: 120
                level: warning
              truthy:
                allowed-values: ['true', 'false', 'on']

  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy for repository scanning
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-repo.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/code-scanning-action/upload@v2
        if: always() && hashFiles('trivy-repo.sarif') != ''
        with:
          sarif_file: 'trivy-repo.sarif'
          
      - name: Run checkov for Infrastructure as Code scanning
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,yaml
          output_format: sarif
          output_file: checkov-results.sarif
          
      - name: Upload checkov results
        uses: github/code-scanning-action/upload@v2
        if: always() && hashFiles('checkov-results.sarif') != ''
        with:
          sarif_file: 'checkov-results.sarif'
          
      - name: Run KICS scan
        uses: checkmarx/kics-github-action@v1.7.0
        with:
          path: '.'
          output_path: kics-results
          output_formats: 'sarif'
          ignore_on_exit: results
          
      - name: Upload KICS results
        uses: github/code-scanning-action/upload@v2
        if: always() && hashFiles('kics-results/results.sarif') != ''
        with:
          sarif_file: 'kics-results/results.sarif'

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name != 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=osvalois
            -Dsonar.projectKey=osvalois_sonarqube-container
            -Dsonar.sources=.
            -Dsonar.exclusions=**/*.md,**/vendor/**,**/node_modules/**

  docker-build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [security-analysis, sonarcloud]
    if: |
      always() &&
      needs.security-analysis.result == 'success' &&
      (needs.sonarcloud.result == 'success' || needs.sonarcloud.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKER_IMAGE }}
            ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha,prefix=sha-,format=short
            type=raw,value={{date 'YYYYMMDD'}}-{{sha}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ steps.meta.outputs.labels }}
            BUILD_VERSION=${{ github.ref_name }}
            VCS_REF=${{ github.sha }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0.17.0
        if: github.event_name != 'pull_request'
        with:
          image: ${{ env.DOCKER_IMAGE }}:sha-${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Attach SBOM to image
        uses: sigstore/cosign-installer@v3
        if: github.event_name != 'pull_request'

      - name: Sign container image
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes \
            ${{ env.DOCKER_IMAGE }}@${{ steps.build.outputs.digest }}

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name != 'pull_request'

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.31.0
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:sha-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-container.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/code-scanning-action/upload@v2
        if: always() && hashFiles('trivy-container.sarif') != ''
        with:
          sarif_file: 'trivy-container.sarif'

      - name: Run Docker Scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ env.DOCKER_IMAGE }}:sha-${{ github.sha }}
          only-fixed: true
          sarif-file: docker-scout.sarif
          
      - name: Upload Docker Scout results
        uses: github/code-scanning-action/upload@v2
        if: always() && hashFiles('docker-scout.sarif') != ''
        with:
          sarif_file: 'docker-scout.sarif'

      - name: Create Security Report
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "## Security Scan Results üõ°Ô∏è" > security-report.md
          echo "" >> security-report.md
          echo "### Image: ${{ env.DOCKER_IMAGE }}:sha-${{ github.sha }}" >> security-report.md
          echo "### Scan Date: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> security-report.md

  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [docker-build, container-scan]
    if: always() && github.event_name == 'pull_request'

    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const name = '${{ github.workflow }}';
            const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            const success = '${{ needs.docker-build.result }}' === 'success';
            const body = `## ${name} ${success ? '‚úÖ Passed' : '‚ùå Failed'}\n\n[View Run](${url})`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: container-scan
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v5
        with:
          package-name: 'sonarqube-container'
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: 'true'
